version: 2.1
jobs:
  build_and_test:
    parallelism: 2
    environment:
      JAVA_TOOL_OPTIONS: "-Xmx3g"
      GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2"
    docker:
      - image: cimg/openjdk:11.0.3
      - image: circleci/postgres:12-alpine
        environment:
          POSTGRES_USER: postgres
          POSTGRES_DB: circle_test
    steps:
      - checkout
      - restore_cache:
          key: v1-gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
      - restore_cache:
          key: v1-gradle-cache-{{ checksum "build.gradle" }}
      - run:
          name: テストの並列実行
          command: |
            cd src/test/java
            CLASSNAMES=$(circleci tests glob "**/*.java" \
              | sed 's@/@.@g' \
              | sed 's/.java$//' \
              | circleci tests split --split-by=timings --timings-type=classname)
            cd ../../..
            GRADLE_ARGS=$(echo $CLASSNAMES | awk '{for (i=1; i<=NF; i++) print "--tests",$i}')
            echo "Prepared arguments for Gradle: $GRADLE_ARGS"
            ./gradlew test $GRADLE_ARGS
      - save_cache:
          paths:
            - ~/.gradle/wrapper
          key: v1-gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
      - save_cache:
          paths:
            - ~/.gradle/caches
          key: v1-gradle-cache-{{ checksum "build.gradle" }}
      - store_test_results:
          path: build/test-results/test
      - store_artifacts:
          path: build/test-results/test
          when: always
      - run:
          name: JARの作成
          command: |
            if [ 0 == 0 ]; then
              ./gradlew assemble
            fi

      - run:
          name: jFrog CLI のインストール
          command: curl -fL https://getcli.jfrog.io | sh
      - run:
          name: Artifactory への接続
          command: |
            ifconfig
            pwd
            ls -ltr ./build
            ls -ltr ./build/libs
            ./jfrog config add --artifactory-url https://taca17.jfrog.io/artifactory/ --user rockhop17g@gmail.com --apikey AKCp8ihLMCzJ3XhHSdPeFR7bRVA7YxKG6aQHCAp8bCJ4RP6HcPifzd7ro5CfUSnrV6KpJS2xR --interactive=false
      - run:
          name: Artifactory へのプッシュ
          command: |
            ./jfrog rt u "build/libs/*.jar" libs-released-local/
            
      #- store_artifacts:
      #    path: build/libs

  deploy:
    working_directory: ~/repo
    docker:
      - image: circleci/python:3.6.1
    steps:
      - checkout
      - run:
          name: Install ansible
          command: |
            sudo pip install --upgrade pip
            sudo pip install ansible
      - run:
          name: Install jFrog CLI
          command: curl -fL https://getcli.jfrog.io | sh
      - run:
          name: Artifactory への接続
          command: |
            ./jfrog config add --artifactory-url https://taca17.jfrog.io/artifactory/ --user rockhop17g@gmail.com --apikey AKCp8ihLMCzJ3XhHSdPeFR7bRVA7YxKG6aQHCAp8bCJ4RP6HcPifzd7ro5CfUSnrV6KpJS2xR --interactive=false
      - run:
          name: Artifactory からダウンロード
          command: |
            ./jfrog rt dl libs-released-local/*.jar
      #- run:
      #    name: deploy master
      #    command: cd ansible/ && ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -i hosts deploy.yml --extra-vars "aws_access_key=${AWS_ACCESS_KEY_ID} aws_secret_key=${AWS_SECRET_ACCESS_KEY}"

workflows:
  version: 2
  workflow:
    jobs:
    - build_and_test
    - deploy:
        requires:
          - build_and_test
